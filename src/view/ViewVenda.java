/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.ControllerCaixa;
import controller.ControllerClientes;
import controller.ControllerProdutos;
import controller.ControllerProdutosVendasProdutos;
import controller.ControllerRecebimentos;
import controller.ControllerRelatorio;
import controller.ControllerVendas;
import controller.ControllerVendasCliente;
import controller.ControllerVendasProdutos;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import model.ModelCaixa;
import model.ModelClientes;
import model.ModelProdutos;
import model.ModelProdutosVendasProdutos;
import model.ModelRecebimentos;
import model.ModelVendas;
import model.ModelVendasCliente;
import model.ModelVendasProdutos;
import util.BLDatas;

/**
 *
 * @author Usuario
 */
public class ViewVenda extends javax.swing.JFrame {

    ModelClientes modelCliente = new ModelClientes();
    ModelProdutos modelProdutos = new ModelProdutos();
    ModelVendas modelVendas = new ModelVendas();
    ModelVendasProdutos modelVendasProdutos = new ModelVendasProdutos();
    ModelProdutosVendasProdutos modelProdutosVendasProdutos = new ModelProdutosVendasProdutos();
    ModelRecebimentos modelRecebimentos = new ModelRecebimentos();
    ModelCaixa modelCaixa = new ModelCaixa();

    ControllerClientes controllerCliente = new ControllerClientes();
    ControllerProdutos controllerProdutos = new ControllerProdutos();
    ControllerVendas controllerVendas = new ControllerVendas();
    ControllerVendasCliente controllerVendasCliente = new ControllerVendasCliente();
    ControllerVendasProdutos controllerVendasProdutos = new ControllerVendasProdutos();
    ControllerProdutosVendasProdutos controllerProdutosVendasProdutos = new ControllerProdutosVendasProdutos();
    ControllerCaixa controllerCaixa = new ControllerCaixa();
    ControllerRecebimentos controllerRecebimento = new ControllerRecebimentos();

    ArrayList<ModelClientes> listaModelClientes = new ArrayList<>();
    ArrayList<ModelProdutos> listaModelProdutos = new ArrayList<>();
    ArrayList<ModelVendasCliente> listaModelVendasCliente = new ArrayList<>();
    ArrayList<ModelVendasProdutos> listaModelVendasProdutos = new ArrayList<>();
    ArrayList<ModelProdutosVendasProdutos> listaModelProdutosVendasProdutos = new ArrayList<>();

    String alterarSalvar = "salvar";

    BLDatas bLDatas = new BLDatas();
    int valorPermissao = -1;

    /**
     * Creates new form ViewVenda
     */
    public ViewVenda() {
        initComponents();
        this.listarClientes();
        this.listarProdutos();
        this.carregarVendas();
        this.carregarComboBoxClientes();
        this.carregarComboBoxProdutos();
        this.jtfCodigoCliente.setText("1");
        this.jtfCodigoCliente.requestFocus();
        this.jtfValorPago.setText("0");
    }

    public ViewVenda(int valorPermissao) {
        initComponents();
        this.listarClientes();
        this.listarProdutos();
        this.carregarVendas();
        this.carregarComboBoxClientes();
        this.carregarComboBoxProdutos();
        this.jtfCodigoCliente.setText("1");
        this.jtfCodigoCliente.requestFocus();
        this.jtfValorPago.setText("0");
        this.valorPermissao = valorPermissao;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtfCodigoCliente = new javax.swing.JTextField();
        jcbCliente = new componentes.UJComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jtfNumeroVenda = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jcbProduto = new componentes.UJComboBox();
        jtfQuantidade = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jbAdicionar = new javax.swing.JButton();
        jtfCodigoProduto = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtProdutosVendas = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jtfDesconto = new javax.swing.JTextField();
        jtfValorTotal = new javax.swing.JTextField();
        jbCancelar = new javax.swing.JButton();
        jbSalvar = new javax.swing.JButton();
        jbRemoverProduto = new javax.swing.JButton();
        jbAdicionarCliente = new javax.swing.JButton();
        jbAtualizarClientes = new javax.swing.JButton();
        jbAdicionarCliente2 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jtfValorPago = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jtfPesquisar = new javax.swing.JTextField();
        jbPesquisar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtVendas = new javax.swing.JTable();
        jbExcluir = new javax.swing.JButton();
        jbAlterar = new javax.swing.JButton();
        jbVoltar2 = new javax.swing.JButton();
        jbGerarRelatorio = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Vendas");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Código Cli.");

        jtfCodigoCliente.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtfCodigoClienteFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfCodigoClienteFocusLost(evt);
            }
        });
        jtfCodigoCliente.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jtfCodigoClienteInputMethodTextChanged(evt);
            }
        });

        jcbCliente.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jcbClientePopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        jcbCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbClienteActionPerformed(evt);
            }
        });

        jLabel2.setText("Nome do Cliente:");

        jLabel3.setText("Número da venda:");

        jtfNumeroVenda.setEnabled(false);

        jLabel4.setText("Código Pro.");

        jLabel5.setText("Nome do Produto:");

        jcbProduto.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jcbProdutoPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        jLabel6.setText("Quantidade");

        jbAdicionar.setText("Adicionar");
        jbAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAdicionarActionPerformed(evt);
            }
        });

        jtfCodigoProduto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfCodigoProdutoFocusLost(evt);
            }
        });

        jtProdutosVendas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cód. Prod.", "Nome Produto", "Quant.", "Valor Un.", "Valor Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtProdutosVendas);
        if (jtProdutosVendas.getColumnModel().getColumnCount() > 0) {
            jtProdutosVendas.getColumnModel().getColumn(0).setMinWidth(90);
            jtProdutosVendas.getColumnModel().getColumn(0).setPreferredWidth(90);
            jtProdutosVendas.getColumnModel().getColumn(0).setMaxWidth(90);
            jtProdutosVendas.getColumnModel().getColumn(2).setMinWidth(70);
            jtProdutosVendas.getColumnModel().getColumn(2).setPreferredWidth(70);
            jtProdutosVendas.getColumnModel().getColumn(2).setMaxWidth(70);
            jtProdutosVendas.getColumnModel().getColumn(3).setMinWidth(90);
            jtProdutosVendas.getColumnModel().getColumn(3).setPreferredWidth(90);
            jtProdutosVendas.getColumnModel().getColumn(3).setMaxWidth(90);
            jtProdutosVendas.getColumnModel().getColumn(4).setMinWidth(90);
            jtProdutosVendas.getColumnModel().getColumn(4).setPreferredWidth(90);
            jtProdutosVendas.getColumnModel().getColumn(4).setMaxWidth(90);
        }

        jLabel7.setText("Desconto:");

        jLabel8.setText("Valor total:");

        jtfDesconto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jtfDesconto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfDescontoFocusLost(evt);
            }
        });
        jtfDesconto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfDescontoActionPerformed(evt);
            }
        });

        jtfValorTotal.setEditable(false);
        jtfValorTotal.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jbCancelar.setText("Cancelar / Novo");
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });

        jbSalvar.setText("Salvar");
        jbSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalvarActionPerformed(evt);
            }
        });

        jbRemoverProduto.setText("Remover produto");
        jbRemoverProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoverProdutoActionPerformed(evt);
            }
        });

        jbAdicionarCliente.setText("+");
        jbAdicionarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAdicionarClienteActionPerformed(evt);
            }
        });

        jbAtualizarClientes.setText("Atualizar");
        jbAtualizarClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAtualizarClientesActionPerformed(evt);
            }
        });

        jbAdicionarCliente2.setText("Voltar");
        jbAdicionarCliente2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAdicionarCliente2ActionPerformed(evt);
            }
        });

        jLabel10.setText("Valor pago:");

        jtfValorPago.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabel11.setText("Usar usuário genérico");

        jButton2.setText("*");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jbAtualizarClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jtfCodigoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jcbProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(36, 36, 36)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jtfQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jbAdicionar))
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jtfCodigoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbAdicionarCliente2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jcbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbAdicionarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jtfNumeroVenda, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE))
                        .addGap(67, 67, 67))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jbRemoverProduto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(75, 75, 75))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jtfDesconto, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jtfValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jtfValorPago, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(62, 62, 62))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jbCancelar)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jbSalvar))))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbAtualizarClientes)
                    .addComponent(jbAdicionarCliente2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfCodigoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfNumeroVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbAdicionarCliente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jButton2))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbAdicionar)
                    .addComponent(jtfCodigoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jtfValorTotal)
                                .addComponent(jtfValorPago, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                            .addComponent(jtfDesconto)))
                    .addComponent(jbRemoverProduto))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbCancelar)
                    .addComponent(jbSalvar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Cadastro", jPanel1);

        jLabel9.setText("Pesquisar:");

        jtfPesquisar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtfPesquisarKeyTyped(evt);
            }
        });

        jbPesquisar.setText("Pesquisar");
        jbPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPesquisarActionPerformed(evt);
            }
        });

        jtVendas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cod Venda", "Cod Cliente", "Nome Cliente", "Data", "Valor Bruto", "Desconto", "Valor Liquido", "Valor Recebido"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jtVendas);
        if (jtVendas.getColumnModel().getColumnCount() > 0) {
            jtVendas.getColumnModel().getColumn(0).setMinWidth(75);
            jtVendas.getColumnModel().getColumn(0).setMaxWidth(75);
            jtVendas.getColumnModel().getColumn(1).setMinWidth(75);
            jtVendas.getColumnModel().getColumn(1).setMaxWidth(75);
            jtVendas.getColumnModel().getColumn(3).setMinWidth(90);
            jtVendas.getColumnModel().getColumn(3).setMaxWidth(90);
            jtVendas.getColumnModel().getColumn(4).setMinWidth(75);
            jtVendas.getColumnModel().getColumn(4).setPreferredWidth(75);
            jtVendas.getColumnModel().getColumn(4).setMaxWidth(75);
            jtVendas.getColumnModel().getColumn(5).setMinWidth(75);
            jtVendas.getColumnModel().getColumn(5).setPreferredWidth(75);
            jtVendas.getColumnModel().getColumn(5).setMaxWidth(75);
            jtVendas.getColumnModel().getColumn(6).setMinWidth(85);
            jtVendas.getColumnModel().getColumn(6).setPreferredWidth(85);
            jtVendas.getColumnModel().getColumn(6).setMaxWidth(85);
        }

        jbExcluir.setText("Excluir");
        jbExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExcluirActionPerformed(evt);
            }
        });

        jbAlterar.setText("Alterar");
        jbAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAlterarActionPerformed(evt);
            }
        });

        jbVoltar2.setText("Voltar");
        jbVoltar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbVoltar2ActionPerformed(evt);
            }
        });

        jbGerarRelatorio.setText("Gerar relatório");
        jbGerarRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGerarRelatorioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbVoltar2)
                    .addComponent(jLabel9)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jtfPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbPesquisar)))
                .addContainerGap(250, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jbGerarRelatorio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbExcluir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbAlterar)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbVoltar2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbPesquisar))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbExcluir)
                    .addComponent(jbAlterar)
                    .addComponent(jbGerarRelatorio))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Consultar/Excluir/Alterar", jPanel2);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 720, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jtfCodigoClienteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfCodigoClienteFocusLost
        this.setComboBoxCliente();
    }//GEN-LAST:event_jtfCodigoClienteFocusLost

    private void jcbClientePopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jcbClientePopupMenuWillBecomeInvisible
        if (jcbCliente.isPopupVisible()) {
            this.carregarComboBoxClientes();
        }
    }//GEN-LAST:event_jcbClientePopupMenuWillBecomeInvisible

    private void jcbProdutoPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jcbProdutoPopupMenuWillBecomeInvisible
        if (jcbProduto.isPopupVisible()) {
            this.carregarComboBoxProdutos();
        }
    }//GEN-LAST:event_jcbProdutoPopupMenuWillBecomeInvisible

    private void jtfCodigoProdutoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfCodigoProdutoFocusLost
        //pega o cliente e passa para o modelCliente
        modelProdutos = controllerProdutos.retornarProdutoController(Integer.parseInt(jtfCodigoProduto.getText()));
        //pega o nome do cliente e adiciona no combo box ao tirar o foco do campo COd. Cliente
        jcbProduto.setSelectedItem(modelProdutos.getProNome());
    }//GEN-LAST:event_jtfCodigoProdutoFocusLost

    private void jbExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExcluirActionPerformed
        int linha = jtVendas.getSelectedRow();
        int codigoVenda = (int) jtVendas.getValueAt(linha, 0);
        int codigoCliente = (int) jtVendas.getValueAt(linha, 1);
        int codigoRecebimento = controllerRecebimento.retornarRecebimentoController(codigoVenda, codigoCliente).getRecId();

        listaModelProdutos = new ArrayList<>();
        listaModelProdutosVendasProdutos = controllerProdutosVendasProdutos.getListaProdutosVendasProdutosController(codigoVenda);

        for (int i = 0; i < listaModelProdutosVendasProdutos.size(); i++) {
            modelProdutos = new ModelProdutos();
            modelProdutos.setIdProduto(listaModelProdutosVendasProdutos.get(i).getModelProdutos().getIdProduto());
            modelProdutos.setProEstoque(
                    listaModelProdutosVendasProdutos.get(i).getModelProdutos().getProEstoque()
                    + listaModelProdutosVendasProdutos.get(i).getModelVendasProdutos().getVenProQuantidade());
            listaModelProdutos.add(modelProdutos);
        }

        if (controllerProdutos.alterarEstoqueProdutoController(listaModelProdutos)) {
            controllerVendasProdutos.excluirVendaProdutoController(codigoVenda);
            //controllerCaixa.excluirCaixaController(codigoVenda, codigoCliente);
            controllerRecebimento.excluirRecebimentoController(codigoVenda, codigoCliente);

            //Metodo que exclui de caixa
            controllerCaixa.excluirCaixaController(codigoRecebimento, codigoCliente);

            try {
                if (JOptionPane.showConfirmDialog(rootPane, "Tem certeza que deseja excluir o registro?") == 0) {
                    controllerVendas.excluirVendaController(codigoVenda);
                    JOptionPane.showMessageDialog(this, "Venda excluída com sucesso", "ATENÇÃO", JOptionPane.WARNING_MESSAGE);
                } else {
                    return;
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Erro ao excluir a venda", "ERRO", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            } finally {
                this.carregarVendas();
            }

        } else {
            JOptionPane.showMessageDialog(this, "Erro ao excluir a venda", "ERRO", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jbExcluirActionPerformed

    private void jbAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAdicionarActionPerformed
        if (jtfQuantidade.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Você deve preencher todos os campos!", "ERRO", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                modelProdutos = controllerProdutos.retornarProdutoController(Integer.parseInt(jtfCodigoProduto.getText()));

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Código de produto incorreto.", "ERRO", JOptionPane.ERROR_MESSAGE);
                return;
            }
            //adicionar uma linha na tabela
            DefaultTableModel modelo = (DefaultTableModel) jtProdutosVendas.getModel();
            int cont = 0;
            double quantidade = 0;
            try {
                quantidade = Double.parseDouble(jtfQuantidade.getText());

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Insira apenas número no campo quantidade.", "ERRO", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
                return;
            }
            for (int i = 0; i < cont; i++) {
                modelo.setNumRows(0);
            }

            if (modelProdutos.getProEstoque() < Integer.parseInt(jtfQuantidade.getText())) {
                JOptionPane.showMessageDialog(this, "Quantidade em estoque insuficiente.\n"
                        + "Quantidade disponível: " + modelProdutos.getProEstoque(), "ERRO", JOptionPane.ERROR_MESSAGE);
                return;
            } else if (Integer.parseInt(jtfQuantidade.getText()) <= 0) {
                JOptionPane.showMessageDialog(this, "Insira uma quantia válida.\n", "ERRO", JOptionPane.ERROR_MESSAGE);
                return;
            }

            modelo.addRow(new Object[]{
                modelProdutos.getIdProduto(),
                modelProdutos.getProNome(),
                jtfQuantidade.getText(),
                modelProdutos.getProValor(),
                //Utiliza um método para formatar o valor e não quebrar em muitos numeros após a virgula, apenas 2 numeros
                Double.parseDouble(this.formatarValor(quantidade * modelProdutos.getProValor()))
            });
            this.somarValorTotalProdutos();

        }

    }//GEN-LAST:event_jbAdicionarActionPerformed

    private void jtfDescontoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfDescontoFocusLost
        this.somarValorTotalProdutos();
    }//GEN-LAST:event_jtfDescontoFocusLost

    private void jtfDescontoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfDescontoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfDescontoActionPerformed

    private void jbSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalvarActionPerformed
        int codigoVenda = 0, codigoProduto = 0;
        double desconto = 0;
        listaModelVendasProdutos = new ArrayList<>();

        //verifica se há valor no campo desconto, se sim ele passa o valor para a variavel
        if (jtfDesconto.getText().equals("")) {
            desconto = 0;
        } else {
            try {
                desconto = Double.parseDouble(jtfDesconto.getText().replaceAll(",", "."));
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Insira apenas números no campo desconto.", "ERRO", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
                return;
            }
        }

        //SETA OS VALORES DOS CAMPOS PRA VENDA
        try {
            if (this.jtfCodigoCliente.equals("1")) {
                modelVendas.setCliente(1);
                jtfValorPago.setText(jtfValorTotal.getText());
                //System.out.println("Salvou usuario generico");
            } else {
                modelVendas.setCliente(Integer.parseInt(jtfCodigoCliente.getText()));
                //System.out.println("Salvou usuario especifico");
            }

            modelVendas.setVenDataVenda(bLDatas.converterDataParaDateUS(new java.util.Date(System.currentTimeMillis())));
            modelVendas.setVenValorLiquido(Double.parseDouble(jtfValorTotal.getText()));
            modelVendas.setVenValorBruto(Double.parseDouble(jtfValorTotal.getText()) + desconto);
            if (desconto > Double.parseDouble(this.jtfValorTotal.getText())) {
                JOptionPane.showMessageDialog(this, "Valor de desconto maior que valor total.", "ERRO", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                modelVendas.setVenValorDesconto(desconto);
            }
            if (modelVendas.getCliente() == 1) {
                this.jtfValorPago.setText(this.jtfValorTotal.getText());
                modelVendas.setVenValorRecebido(Double.parseDouble(jtfValorPago.getText().replaceAll(",", ".")));
            } else {
                try {
                    if (Double.parseDouble(this.jtfValorPago.getText()) > Double.parseDouble(this.jtfValorTotal.getText())) {
                        JOptionPane.showMessageDialog(this, "Valor pago maior que valor total da venda.", "ERRO", JOptionPane.ERROR_MESSAGE);
                        return;
                    } else {
                        modelVendas.setVenValorRecebido(Double.parseDouble(jtfValorPago.getText().replaceAll(",", ".")));
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Insira apenas números no campo valor pago.", "ERRO", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                    return;
                }
            }
            //JOptionPane.showMessageDialog(this, "Valores de venda foram capturados", "AVISO", JOptionPane.WARNING_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Dados inválidos.", "ERRO", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        if (alterarSalvar.equalsIgnoreCase("salvar")) {
            this.salvarVenda();

        } else if (alterarSalvar.equalsIgnoreCase("alterar")) {
            this.alterarVenda();
        }

    }//GEN-LAST:event_jbSalvarActionPerformed

    private void jbAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAlterarActionPerformed
        try {
            alterarSalvar = "alterar";

            int linha = jtVendas.getSelectedRow();
            //Pega os valores nas colunas de venda e atribui às variaveis
            int codigoVenda = (int) jtVendas.getValueAt(linha, 0);
            int codigoCliente = (int) jtVendas.getValueAt(linha, 1);
            double desconto = (double) jtVendas.getValueAt(linha, 5);
            double valorPago = (double) jtVendas.getValueAt(linha, 7);

            //atribui os valores das variaveis nos campos no formulario de Vendas
            jtfNumeroVenda.setText(String.valueOf(codigoVenda));
            jtfCodigoCliente.setText(String.valueOf(codigoCliente));
            jtfDesconto.setText(String.valueOf(desconto).replace(".", ","));
            jtfValorPago.setText(String.valueOf(valorPago).replace(".", ","));

            modelCliente = controllerCliente.retornarClienteController(codigoVenda);
            listaModelProdutosVendasProdutos = controllerProdutosVendasProdutos.
                    getListaProdutosVendasProdutosController(codigoVenda);

            DefaultTableModel modelo = (DefaultTableModel) jtProdutosVendas.getModel();
            modelo.setNumRows(0);

            for (int i = 0; i < listaModelProdutosVendasProdutos.size(); i++) {
                //jtfNumeroVenda.setText(String.valueOf(listaModelProdutosVendasProdutos.get(i).getModelVendasProdutos().getVenda()));

                modelo.addRow(new Object[]{
                    listaModelProdutosVendasProdutos.get(i).getModelProdutos().getIdProduto(),
                    listaModelProdutosVendasProdutos.get(i).getModelProdutos().getProNome(),
                    listaModelProdutosVendasProdutos.get(i).getModelVendasProdutos().getVenProQuantidade(),
                    listaModelProdutosVendasProdutos.get(i).getModelVendasProdutos().getVenProValor(),
                    listaModelProdutosVendasProdutos.get(i).getModelVendasProdutos().getVenProQuantidade()
                    * listaModelProdutosVendasProdutos.get(i).getModelVendasProdutos().getVenProValor()

                });
            }
            this.setComboBoxCliente();
            somarValorTotalProdutos();
            jTabbedPane1.setSelectedIndex(0);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Selecione uma linha.", "ERRO", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_jbAlterarActionPerformed

    private void jbRemoverProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoverProdutoActionPerformed
        int linha = jtProdutosVendas.getSelectedRow();
        DefaultTableModel modelo = (DefaultTableModel) jtProdutosVendas.getModel();
        modelo.removeRow(linha);
        somarValorTotalProdutos();
    }//GEN-LAST:event_jbRemoverProdutoActionPerformed

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed
        if (JOptionPane.showConfirmDialog(rootPane, "Tem certeza que deseja limpar os campos?") == 0) {
            this.limparFormulario();
        } else {
            return;
        }
    }//GEN-LAST:event_jbCancelarActionPerformed

    private void jtfCodigoClienteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfCodigoClienteFocusGained
        this.setComboBoxCliente();

    }//GEN-LAST:event_jtfCodigoClienteFocusGained

    private void jtfPesquisarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfPesquisarKeyTyped
        this.filtrarVendaCliente();
    }//GEN-LAST:event_jtfPesquisarKeyTyped

    private void jbPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPesquisarActionPerformed
        this.filtrarVendaCliente();
    }//GEN-LAST:event_jbPesquisarActionPerformed

    private void jbAdicionarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAdicionarClienteActionPerformed
        new ViewCliente().setVisible(true);
    }//GEN-LAST:event_jbAdicionarClienteActionPerformed

    private void jbAtualizarClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAtualizarClientesActionPerformed
        this.listarProdutos();
        this.listarClientes();
        this.jtfCodigoCliente.requestFocus();
    }//GEN-LAST:event_jbAtualizarClientesActionPerformed

    private void jtfCodigoClienteInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jtfCodigoClienteInputMethodTextChanged

    }//GEN-LAST:event_jtfCodigoClienteInputMethodTextChanged

    private void jbAdicionarCliente2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAdicionarCliente2ActionPerformed
        new ViewPrincipal(this.valorPermissao).setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jbAdicionarCliente2ActionPerformed

    private void jbVoltar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbVoltar2ActionPerformed
        new ViewPrincipal(this.valorPermissao).setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jbVoltar2ActionPerformed

    private void jcbClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbClienteActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.jtfCodigoCliente.setText("1");
        this.jtfCodigoCliente.requestFocus();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jbGerarRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGerarRelatorioActionPerformed
        ControllerRelatorio controllerRelatorio = new ControllerRelatorio();
        controllerRelatorio.gerarPdfVendas();
    }//GEN-LAST:event_jbGerarRelatorioActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewVenda().setVisible(true);
            }
        });
    }

    private void listarClientes() {
        //retorna todos os clientes pra dentro da lista
        listaModelClientes = controllerCliente.retornarListaClienteController();
        //remove todos valores dentro do combo box pra evitar repetição
        jcbCliente.removeAllItems();
        //adiciona cada elemento da lista dentro do combo box
        for (int i = 0; i < listaModelClientes.size(); i++) {
            //passa o nome de cada elemento da lista para o combo box
            jcbCliente.addItem(listaModelClientes.get(i).getCliNome());
        }
    }

    private void listarProdutos() {
        //retorna todos os produtos pra dentro da lista
        listaModelProdutos = controllerProdutos.retornarListaProdutoController();
        //remove todos valores dentro do combo box pra evitar repetição
        jcbProduto.removeAllItems();
        //adiciona cada elemento da lista dentro do combo box
        for (int i = 0; i < listaModelProdutos.size(); i++) {
            //passa o nome de cada elemento da lista para o combo box
            jcbProduto.addItem(listaModelProdutos.get(i).getProNome());
        }
    }

    private void carregarVendas() {
        DefaultTableModel modelo = (DefaultTableModel) jtVendas.getModel();
        modelo.setNumRows(0);
        listaModelVendasCliente = controllerVendasCliente.getListaVendasClienteController();
        int cont = listaModelVendasCliente.size();

        for (int i = 0; i < cont; i++) {
            modelo.addRow(new Object[]{
                listaModelVendasCliente.get(i).getModelVendas().getVenId(),
                listaModelVendasCliente.get(i).getModelClientes().getIdCliente(),
                listaModelVendasCliente.get(i).getModelClientes().getCliNome(),
                listaModelVendasCliente.get(i).getModelVendas().getVenDataVenda(),
                listaModelVendasCliente.get(i).getModelVendas().getVenValorBruto(),
                listaModelVendasCliente.get(i).getModelVendas().getVenValorDesconto(),
                listaModelVendasCliente.get(i).getModelVendas().getVenValorLiquido(),
                listaModelVendasCliente.get(i).getModelVendas().getVenValorRecebido()
            });

        }
    }

    private void somarValorTotalProdutos() {
        double soma = 0, valor = 0;
        int cont = jtProdutosVendas.getRowCount();
        for (int i = 0; i < cont; i++) {
            valor = (double) jtProdutosVendas.getValueAt(i, 4);
            soma += valor;
        }
        jtfValorTotal.setText(formatarValor(soma));

        try {
            this.aplicarDesconto();
        } catch (Exception e) {
        }

    }

    private void aplicarDesconto() {
        double valorTotalVenda = Double.parseDouble(jtfValorTotal.getText());
        double desconto = Double.parseDouble(jtfDesconto.getText().replaceAll(",", "."));

        if (desconto <= valorTotalVenda) {
            jtfValorTotal.setText(formatarValor(valorTotalVenda - desconto));
        } else {
            JOptionPane.showMessageDialog(this, "Valor de desconto é maior que total.", "ERRO", JOptionPane.ERROR_MESSAGE);
            jtfDesconto.setText("");
            return;
        }
    }

    private void carregarComboBoxProdutos() {
        modelProdutos = controllerProdutos.retornarProdutoController(jcbProduto.getSelectedItem().toString());
        //gambiarra pra retornar como String um valor inteiro
        jtfCodigoProduto.setText(String.valueOf(modelProdutos.getIdProduto()));
    }

    private void carregarComboBoxClientes() {
        modelCliente = controllerCliente.retornarClienteController(jcbCliente.getSelectedItem().toString());
        //gambiarra pra retornar como String um valor inteiro
        jtfCodigoCliente.setText(String.valueOf(modelCliente.getIdCliente()));
    }

    //Limpa forms de produtos de venda
    private void limparFormulario() {
        alterarSalvar = "salvar";
        jtfNumeroVenda.setText("");
        jtfQuantidade.setText("");
        jtfDesconto.setText("");
        jtfValorTotal.setText("");
        jtfValorPago.setText("0");
        DefaultTableModel modelo = (DefaultTableModel) jtProdutosVendas.getModel();
        modelo.setNumRows(0);
    }

    private void salvarVenda() {
        int codigoVenda = 0, codigoProduto = 0;

        codigoVenda = controllerVendas.salvarVendaController(modelVendas);
        if (codigoVenda > 0) {
            JOptionPane.showMessageDialog(this, "Venda salva com sucesso", "AVISO", JOptionPane.WARNING_MESSAGE);

        } else {
            JOptionPane.showMessageDialog(this, "Não foi possível salvar venda", "ERRO", JOptionPane.ERROR_MESSAGE);
        }

        int cont = jtProdutosVendas.getRowCount();
        for (int i = 0; i < cont; i++) {
            codigoProduto = (int) jtProdutosVendas.getValueAt(i, 0);
            modelVendasProdutos = new ModelVendasProdutos();
            modelProdutos = new ModelProdutos();

            //passa valores para vendas_produtos
            modelVendasProdutos.setProduto(codigoProduto);
            modelVendasProdutos.setVenda(codigoVenda);
            modelVendasProdutos.setVenProValor((double) jtProdutosVendas.getValueAt(i, 3));
            modelVendasProdutos.setVenProQuantidade(Integer.parseInt(jtProdutosVendas.getValueAt(i, 2).toString()));

            //diminuindo quantidade em estoque
            modelProdutos.setIdProduto(codigoProduto);
            modelProdutos.setProEstoque(controllerProdutos.retornarProdutoController(codigoProduto).getProEstoque()
                    - Integer.parseInt(jtProdutosVendas.getValueAt(i, 2).toString()));

            listaModelVendasProdutos.add(modelVendasProdutos);
            listaModelProdutos.add(modelProdutos);
        }

        if (controllerVendasProdutos.salvarVendaProdutoController(listaModelVendasProdutos)) {
            controllerProdutos.alterarEstoqueProdutoController(listaModelProdutos);
            this.salvarRecebimento(codigoVenda);

            //JOptionPane.showMessageDialog(this, "Produtos da venda salvo com sucesso", "AVISO", JOptionPane.WARNING_MESSAGE);
            this.carregarVendas();
            this.limparFormulario();
        } else {
            JOptionPane.showMessageDialog(this, "Ocorreu um erro ao salvar os produtos da venda", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void alterarVenda() {
        int codigoVenda = 0, codigoProduto = 0;
        int codigoCliente = Integer.parseInt(jtfCodigoCliente.getText());
//retorna os produtos para o estoque e altera a venda

        int linha = jtVendas.getSelectedRow();
        codigoVenda = (int) jtVendas.getValueAt(linha, 0);
        int codigoRecebimento = controllerRecebimento.retornarRecebimentoController(codigoVenda, codigoCliente).getRecId();
        listaModelProdutos = new ArrayList<>();
        listaModelProdutosVendasProdutos = controllerProdutosVendasProdutos.getListaProdutosVendasProdutosController(codigoVenda);

        for (int i = 0; i < listaModelProdutosVendasProdutos.size(); i++) {
            modelProdutos = new ModelProdutos();
            modelProdutos.setIdProduto(listaModelProdutosVendasProdutos.get(i).getModelProdutos().getIdProduto());
            modelProdutos.setProEstoque(
                    listaModelProdutosVendasProdutos.get(i).getModelProdutos().getProEstoque()
                    + listaModelProdutosVendasProdutos.get(i).getModelVendasProdutos().getVenProQuantidade());
            listaModelProdutos.add(modelProdutos);
        }

        if (controllerProdutos.alterarEstoqueProdutoController(listaModelProdutos)) {
            controllerRecebimento.excluirRecebimentoController(codigoVenda, codigoCliente);
            controllerCaixa.excluirCaixaController(codigoRecebimento, codigoCliente);
            this.salvarRecebimento(codigoVenda);
            try {
                controllerVendasProdutos.excluirVendaProdutoController(codigoVenda);
//                JOptionPane.showMessageDialog(
//                        this, "Produtos de venda excluída com sucesso", "ATENÇÃO", JOptionPane.WARNING_MESSAGE);
            } catch (Exception e) {
//                JOptionPane.showMessageDialog(
//                        this, "Erro ao excluir os produtos de venda", "ERRO", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            } finally {
                this.carregarVendas();
            }

        } else {
//            JOptionPane.showMessageDialog(this, "Erro ao excluir os produtos de venda", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
        //FIM DO RETORNA E ALTERA PRODUTOS
        modelVendas.setVenId(codigoVenda);
        //CAPTURA TODOS OS VALORES CORRETOS
        /*JOptionPane.showMessageDialog(this, "ID_VENDA: " + modelVendas.getVenId()
                + "ID CLIENTE: " + modelVendas.getCliente()
                + "DATA VENDA: " + modelVendas.getVenDataVenda()
                + "VALOR LIQUIDO: " + modelVendas.getVenValorLiquido()
                + "VALOR BRUTO: " + modelVendas.getVenValorBruto()
                + "DESCONTO: " + modelVendas.getVenValorDesconto());
         */
        if (controllerVendas.alterarVendaController(modelVendas)) {
            this.somarValorTotalProdutos();
//            JOptionPane.showMessageDialog(
//                    this, "Venda alterada com sucesso", "ATENÇÃO", JOptionPane.WARNING_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Erro ao alterar venda", "ERRO", JOptionPane.ERROR_MESSAGE);
        }

        //adiciona os novos produtos na venda para salvar
        int cont = jtProdutosVendas.getRowCount();
        for (int i = 0; i < cont; i++) {
            codigoProduto = (int) jtProdutosVendas.getValueAt(i, 0);

            modelVendasProdutos = new ModelVendasProdutos();
            modelProdutos = new ModelProdutos();

            //passa valores para vendas_produtos
            modelVendasProdutos.setProduto(codigoProduto);
            modelVendasProdutos.setVenda(codigoVenda);
            modelVendasProdutos.setVenProValor((double) jtProdutosVendas.getValueAt(i, 3));
            modelVendasProdutos.setVenProQuantidade(Integer.parseInt(jtProdutosVendas.getValueAt(i, 2).toString()));

            //Diminuindo produtos em estoque
            modelProdutos.setIdProduto(codigoProduto);
            modelProdutos.setProEstoque(controllerProdutos.retornarProdutoController(codigoProduto).getProEstoque()
                    - Integer.parseInt(jtProdutosVendas.getValueAt(i, 2).toString()));

            listaModelVendasProdutos.add(modelVendasProdutos);
            listaModelProdutos.add(modelProdutos);
        }
        //SALVA OS NOVOS PRODUTOS DA VENDA
        if (controllerVendasProdutos.salvarVendaProdutoController(listaModelVendasProdutos)) {
            controllerProdutos.alterarEstoqueProdutoController(listaModelProdutos);//MEXENDO AQ
            JOptionPane.showMessageDialog(
                    this, "Produtos de venda salvos com sucesso", "ATENÇÃO", JOptionPane.WARNING_MESSAGE);
            carregarVendas();
            limparFormulario();
        } else {
            JOptionPane.showMessageDialog(this, "Erro ao salvar produtos de venda", "ERRO", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void filtrarVendaCliente() {
        DefaultTableModel modelo = (DefaultTableModel) this.jtVendas.getModel();
        final TableRowSorter<TableModel> classificador = new TableRowSorter<>(modelo);
        this.jtVendas.setRowSorter(classificador);
        String texto = jtfPesquisar.getText();
        //texto é o nome do cliente-venda a ser filtrado, e 2 é a coluna onde a informação esta localizada na tabela
        classificador.setRowFilter(RowFilter.regexFilter(texto, 2));
    }

    private void setComboBoxCliente() {
        try {
            //pega o cliente e passa para o modelCliente
            modelCliente = controllerCliente.retornarClienteController(Integer.parseInt(jtfCodigoCliente.getText()));
            //pega o nome do cliente e adiciona no combo box ao tirar o foco do campo COd. Cliente
            jcbCliente.setSelectedItem(modelCliente.getCliNome());
        } catch (Exception e) {
        }
    }

    private String formatarValor(Double valor) {
        return String.format("%.2f", valor).replaceAll(",", ".");
    }

    private void salvarRecebimento(int codigoVenda) {
        try {
            //Passa os dados para registrar um novo Recebimento no banco de dados
            modelRecebimentos.setRecCliente(Integer.parseInt(jtfCodigoCliente.getText()));
            modelRecebimentos.setRecVenda(codigoVenda);
            modelRecebimentos.setRecData(bLDatas.converterDataParaDateUS(new java.util.Date(System.currentTimeMillis())));
            modelRecebimentos.setRecMetodo("A vista");
            modelRecebimentos.setRecValor(Double.parseDouble(jtfValorPago.getText().replaceAll(",", ".")));
            int codigoRecebimento = controllerRecebimento.salvarRecebimento(modelRecebimentos);

            //Passando os dados para dentro do modelCaixa
            modelCaixa.setIdCaixaMovimentacao(codigoRecebimento);
            modelCaixa.setCaixaMovimentacao("Recebimento");
            modelCaixa.setCaixaData(bLDatas.converterDataParaDateUS(new java.util.Date(System.currentTimeMillis())));
            modelCaixa.setCaixaValor(Double.parseDouble(jtfValorPago.getText().replaceAll(",", ".")));
            //Aqui o controllerCliente está retornando o cliente do banco de dados e pegando seu nome para atribuir ao ator
            modelCaixa.setCaixaAtor(controllerCliente.retornarClienteController(
                    Integer.parseInt(jtfCodigoCliente.getText())).getCliNome());
            modelCaixa.setIdCaixaAtor(Integer.parseInt(jtfCodigoCliente.getText()));
//            System.out.println("Valor de idCaixaAtor " + modelCaixa.getIdCaixaAtor() + "\nO que era esperado: " + jtfCodigoCliente.getText());

            //controller efetua os inserts dentro do banco de dados
            controllerCaixa.salvarCaixaController(modelCaixa);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton jbAdicionar;
    private javax.swing.JButton jbAdicionarCliente;
    private javax.swing.JButton jbAdicionarCliente2;
    private javax.swing.JButton jbAlterar;
    private javax.swing.JButton jbAtualizarClientes;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbExcluir;
    private javax.swing.JButton jbGerarRelatorio;
    private javax.swing.JButton jbPesquisar;
    private javax.swing.JButton jbRemoverProduto;
    private javax.swing.JButton jbSalvar;
    private javax.swing.JButton jbVoltar2;
    private componentes.UJComboBox jcbCliente;
    private componentes.UJComboBox jcbProduto;
    private javax.swing.JTable jtProdutosVendas;
    private javax.swing.JTable jtVendas;
    private javax.swing.JTextField jtfCodigoCliente;
    private javax.swing.JTextField jtfCodigoProduto;
    private javax.swing.JTextField jtfDesconto;
    private javax.swing.JTextField jtfNumeroVenda;
    private javax.swing.JTextField jtfPesquisar;
    private javax.swing.JTextField jtfQuantidade;
    private javax.swing.JTextField jtfValorPago;
    private javax.swing.JTextField jtfValorTotal;
    // End of variables declaration//GEN-END:variables

}
